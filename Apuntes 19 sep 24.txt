------------------
-----CLIENTES-----
------------------

-----JavaScript-----

Uso mas común, interactuar con el usuario. También sirve para permitir interactuar con una página web.

Es un lenguaje orientado a eventos.

<script type="text/javascript">  |||| podríamos usar src, para tener el código en otro sitio

	..........

</script>

Esta etiqueta puede ir en cualquier sitio, pero idealmente debería estar en el head, porque si no Google llora.

console.log("hola"); -> sout de js

-Variables:
	var num = 4; ---|
	let num = 4; ---|-> permite no poner el igual, var num 4;
	const num = 4; -|
	num = 4; -> si no pongo nada, me pone var por defecto
-Funciones:
	function sumar (n1, n2){
		...
	}

Diferencia entre var y let -> scope (visibilidad) || var: scope de función, let: scope de su bloque (las llaves entre las que se encuentra)
const es igual a let, pero constante

Cualquier variable definida al principio del fichero JS, fuera de cualquier función, se considera global.

Parametros opcionales -> si una función requiere parámetros y no se le pasan, JS se lo come, si eso daría fallo en la ejecución (al llegar al valor sin inicializar)

Valores por defecto como python:
function sumar (n1 = 4, n2 = 2){
	...
}

-otra manera (se hacía así antes)-

function sumar (n1, n2){
	n1 = n1 || 4;
	n2 = n2 || 2;
	...
}

Comentarios -> //... y /*...*/

Los punto y coma no son obligatorios, pero recomendables.

-Formas de usar JS en HTML:
Atributo (on..., on..., ...) en una etiqueta:
	<input type="button" value="pulsa" onclick="...código..."/> || esto es mas feo que pegarle a un padre
	<input type="button" value="pulsa" onclick="nombreDeMetodo();"/> || también feo

--------------------
-----INTERFACES-----
--------------------

Para abrir carpeta de proyecto desde consola:
	ls es dir
	cd es lo mismo
	cuando llego a la carpeta que quiero abrir, code .

-Tipos de enlaces (HTML con CSS/JS...):
	Parametro style dentro de etiqueta con valores dentro (muy feo)
	Etiqueta style en el head (feo pero por vagueza a veces si)
	Archivo separado con todo el CSS (recomendado)
	Separar el CSS en varios archivos, para que se ejecute uno detrás de otro, como capas de pintura.

-Comentarios shortcut: CTRL + ç

-Bootstraps -> estilos de CSS y JS. Hay dos maneras de usarlo, descargar y añadir carpeta al proyecto (recomendado) o añadir etiqueta de  CDN de la página.
CDN es una forma de comunicarse con los recursos que se quieren usando enlaces.

Para hacerlo habiendose descargado el recurso, usamos la ruta relativa a la carpeta en la que tenemos el bootstrap.
	<link href="./bootstrap-5.3.3-dist/css/bootstrap.min.css" rel="stylesheet"/> || min en estilos
	<script src="./bootstrap-5.3.3-dist/js/bootstrap.bundle.min.js"></script> || bundle.min en scripts
	
Para hacerlo usando el CDN:
	La página es : https://getbootstrap.com/docs/5.3/getting-started/download/#cdn-via-jsdelivr
	Las etiquetas son algo parecido a esto:
    	<!-- estilos -->
    	<link
   	  href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
  	  rel="stylesheet"
  	  integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
   	  crossorigin="anonymous"
  	/>
  	<!-- scripts -->
 	<script
  	  src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
  	  integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
  	  crossorigin="anonymous"
  	></script>

A través del siguiente link puedo ver todo lo que puede hacer bootstrap y un ejemplo (muy útil)
	https://getbootstrap.com/docs/5.3/components/

-Difiniendo estilos: propiedades / valores
	Selector de sintaxis: color/background-color/font-size.......
	Cajas: padding (relleno, espacio al redecor del contenido), border (marco, linea fuera del relleno), margin (margen, espacio fuera de lo anterior)

En la etiqueta font-family ocurre lo siguiente:
	p{
            font-family: Arial, Helvetica, sans-serif; -> si no existe Arial, usa Helvetica, si no sans-serif,
        }

-Selectores básicos:
	* -----------------> todo
	etiqueta ----------> la etiqueta
	.class1 -----------> la clase class1
	#id1 --------------> el id id1
	sel1 sel2 ---------> selectores de sel2 que estan dentro de sel1
	.class1.class2 ----> selectores con las dos clases
	sel1.class1 -------> todos los selectores sel1 con clase class1
	sel1, sel2 --------> todos los selectores incluidos con las comas
	sel1 > sel2 -------> selectores sel2 que sean hijos de sel1
	sel1 + sel2 -------> selectores sel2 que sean hermanos (mismo padre) de sel1

-Unidades de medida:
Relativas:
	px --------> pixeles (relativo al dispositivo)
	em --------> relativo al tamaño de la fuente del elemento (2em = 2 * tam fuente actual)
	% ---------> porcentaje relativo a elemento padre
	vh y vw ---> medidas relativas de acuerdo al viewport (1vh = 1% altura del viewport)
Absolutas:
	in --------> pulgadas (1in = 2.54cm)
	cm --------> cemtímetros
	mm --------> milímetros
	pt --------> puntos (1pt = 1/72 pulgadas)
	pc --------> picas (1pc = 12 puntos)
Colores.
Texto.
Fuentes.
Listas.
Tablas.
Pseudo-clases para selección de hijos o hermanos (:first-child, :last-of-type...)